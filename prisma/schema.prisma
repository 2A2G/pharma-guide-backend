generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// *
///  * npx prisma migrate dev  -> Crea y aplica migraciones en desarrollo, útil cuando se hacen cambios en el esquema y se necesita aplicarlos en la base de datos local.
///  * npx prisma migrate reset --force  -> Reinicia la base de datos, eliminando todas las tablas y aplicando todas las migraciones desde cero. La opción `--force` evita la confirmación interactiva.
///  * npx prisma migrate deploy -> Aplica las migraciones pendientes en un entorno de producción o despliegue, sin eliminar datos existentes.
///  * npx prisma db push  -> Sin generar migraciones, empuja el estado actual del esquema a la base de datos (útil cuando solo quieres sincronizar el esquema sin generar migraciones).
///  * npx prisma generate  -> Regenera el cliente Prisma después de realizar cambios en el esquema o después de actualizar la configuración.
///  * npx prisma studio  -> Abre una interfaz gráfica en el navegador para interactuar con la base de datos a través de Prisma Studio, donde puedes visualizar y modificar los datos.

model Role {
  id        Int      @id @default(autoincrement())
  name      String   @unique @db.VarChar(100)
  statusId  Int?
  user      User[]

  isDeleted Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id              Int         @id @default(autoincrement())
  full_name       String
  email           String      @unique
  password        String
  roleId          Int
  birth_date      DateTime    @db.Date
  country         String?
  number_identity String      @unique
  phone           String?
  sex             String

  role            Role        @relation(fields: [roleId], references: [id])
  studyPlans      StudyPlan[]
  drug            Drug[]

  isDeleted       Boolean     @default(false)

  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model StudyPlan {
  id          Int      @id @default(autoincrement())
  userId      Int
  subjet_name String   @unique @db.VarChar(100)
  total_days  Int
  daily_hour  Decimal  @db.Decimal(10, 2)
  
  user        User     @relation(fields: [userId], references: [id])

  isDeleted   Boolean  @default(false)

  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())
}

model Drug {
  id                  Int      @id @default(autoincrement())
  name_generic        String   @db.VarChar(100)
  brand_name          String   @db.VarChar(100)
  mechanism_of_action String   @db.VarChar(255)
  therapeutic_class   String?  @db.VarChar(100)
  tags                String?

  userId              Int

  isDeleted           Boolean  @default(false)

  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  user                User     @relation(fields: [userId], references: [id])
}

model TypeIa {
  id             Int    @id @default(autoincrement())
  name           String @unique @db.VarChar(100) //-> Diagrama, texto, imagen, etc.
  managementIaId Int

  managementIa ManagementIa[]

  isDeleted    Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model ManagementIa {
  id                 Int     @id @default(autoincrement())
  name               String  @db.Text
  typeIAId           Int
  provider           String  @db.Text
  api_key            String  @db.Text
  model              String  @db.Text
  version            String? @db.Text
  url_api            String  @db.Text
  method             String  @default("POST")
  headers_template   Json
  body_template      Json
  response_path      String  @default("result")
  output_type        String? @db.VarChar(50)
  prompt_description String

  TypeIA    TypeIa   @relation(fields: [typeIAId], references: [id])
  isDeleted Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, model, version])
}
